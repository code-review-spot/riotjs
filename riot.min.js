/*
  Riot.js 0.9.4 | moot.it/riotjs | @license MIT
  (c) 2013 Tero Piirainen, Moot Inc and other contributors.
 */
(function(t) {
  "use strict";
  var n = t.$ = t.$ || {};
  if (n.riot) return;
  n.riot = "0.9.4";

  function e(t) {
    return Object.prototype.toString.call(t) == "[object Function]"
  }
  n.observable = function(t) {
    var n = {}, o = [].slice;
    t.on = function(o, r) {
      if (e(r)) {
        o = o.split(/\s+/);
        for (var i = 0, f = o.length, u; i < f; i++) {
          u = o[i];
          (n[u] = n[u] || [])
            .push(r);
          if (f > 1) r.typed = true
        }
      }
      return t
    };
    t.off = function(e, o) {
      e = e.split(/\s+/);
      for (var r = 0, i; r < e.length; r++) {
        i = e[r];
        if (!o) {
          n[i] = [];
          continue
        }
        var f = n[i] || [],
          u = -1;
        for (var a = 0, c = f.length; a < c; a++) {
          if (f[a] === o || f[a].listener === o) {
            u = a;
            break
          }
        }
        if (u >= 0) f.splice(u, 1)
      }
      return t
    };
    t.one = function(n, o) {
      function r() {
        t.off(n, o);
        o.apply(t, arguments)
      }
      if (e(o)) {
        r.listener = o;
        t.on(n, r)
      }
      return t
    };
    t.trigger = function(e) {
      var r = o.call(arguments, 1),
        i = n[e] || [];
      for (var f = 0, u = i.length, a, c; f < u; ++f) {
        a = i[f];
        if (!a) continue;
        a.apply(t, a.typed ? [e].concat(r) : r)
      }
      return t
    };
    return t
  };
  var o, r = n.observable({});

  function i(n) {
    r.trigger("pop", n || t.location.hash)
  }

  function f(n, e) {
    t.addEventListener(n, e, false)
  }
  f("load", function() {
    t.setTimeout(function() {
      o || i()
    }, 1)
  });
  f("popstate", function(t) {
    if (!o) o = true;
    i()
  });
  n.route = function(n) {
    if (e(n)) {
      r.on("pop", n)
    } else if (n != t.location.hash) {
      if (t.history.pushState) t.history.pushState("", "", n);
      i(n)
    }
  }
})(window);